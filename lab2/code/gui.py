import sys
import os
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QTableWidget, QTableWidgetItem,
                             QTextEdit, QProgressBar, QFileDialog, QMessageBox,
                             QWidget, QHeaderView, QTabWidget,
                             QLineEdit, QGroupBox, QFrame)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import QFont, QPalette, QColor
from image_analyzer import ImageAnalyzer

class AnalysisThread(QThread):
    """–ê—Å–æ–±–Ω—ã –ø–∞—Ç–æ–∫ –¥–ª—è –∞–ø—Ä–∞—Ü–æ—û–∫—ñ –º–∞–ª—é–Ω–∫–∞—û"""
    progress = pyqtSignal(int, int, str)  # –±—è–≥—É—á—ã, —É—Å—è–≥–æ, —ñ–º—è —Ñ–∞–π–ª–∞
    finished = pyqtSignal(dict)  # –≤—ã–Ω—ñ–∫—ñ

    def __init__(self, folder_path):
        super().__init__()
        self.folder_path = folder_path
        self.analyzer = ImageAnalyzer(max_workers=6)

    def run(self):
        try:
            results = self.analyzer.analyze_folder(
                self.folder_path,
                lambda current, total, filename: self.progress.emit(current, total, filename)
            )
            self.finished.emit(results)
        except Exception as e:
            self.finished.emit({'error': str(e)})

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.analysis_thread = None
        self.current_results = None
        self.current_folder = ""
        self.initUI()

    def initUI(self):
        self.setWindowTitle("–ê–Ω–∞–ª–∏–∑–∞—Ç–∞—Ä –º–µ—Ç–∞–¥–∞–Ω—ã—Ö –º–∞–ª—é–Ω–∫–∞—û v2.0")
        self.setGeometry(100, 100, 1400, 900)

        # –ü—Ä—ã–≥–æ–∂—ã—è —Å—Ç—ã–ª—ñ –¥–ª—è —û—Å—è–≥–æ —ñ–Ω—Ç—ç—Ä—Ñ–µ–π—Å—É
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
                font-family: Segoe UI, Arial;
                font-size: 12px;
            }
            QGroupBox {
                font-weight: bold;
                border: 1px solid #d0d0d0;
                border-radius: 6px;
                margin-top: 5px;
                padding-top: 10px;
                background-color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
            }
            QLabel {
                color: #333333;
            }
        """)

        # –¶—ç–Ω—Ç—Ä–∞–ª—å–Ω—ã –≤—ñ–¥–∂—ç—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–∞–ª–æ—û–Ω—ã layout
        main_layout = QVBoxLayout()
        main_layout.setSpacing(8)  # –ú–µ–Ω—à—ã—è –∞–¥—Å—Ç–∞—û–∫—ñ –ø–∞–º—ñ–∂ —Å–µ–∫—Ü—ã—è–º—ñ
        main_layout.setContentsMargins(12, 12, 12, 12)
        central_widget.setLayout(main_layout)

        # –°—Ç–≤–∞—Ä—ç–Ω–Ω–µ —ñ–Ω—Ç—ç—Ä—Ñ–µ–π—Å—É
        self.create_header(main_layout)
        self.create_controls(main_layout)
        self.create_progress_section(main_layout)
        self.create_results_section(main_layout)  # –ì—ç—Ç–∞—è —Å–µ–∫—Ü—ã—è –∑–∞–π–º–∞–µ –±–æ–ª—å—à –º–µ—Å—Ü–∞
        self.create_status_bar()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–±–Ω–∞—û–ª–µ–Ω–Ω—è —ñ–Ω—Ç—ç—Ä—Ñ–µ–π—Å—É
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_ui)
        self.update_timer.start(100)

    def create_header(self, layout):
        """–°—Ç–≤–∞—Ä—ã—Ü—å –∑–∞–≥–∞–ª–æ–≤–∞–∫ –ø—Ä–∞–≥—Ä–∞–º—ã - –º–µ–Ω—à—ã –ø–∞ –ø–∞–º–µ—Ä—ã"""
        header_frame = QFrame()
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                    stop: 0 #3498db, stop: 1 #2c3e50);
                border-radius: 6px;
                padding: 10px;
            }
        """)

        header_layout = QVBoxLayout()
        header_frame.setLayout(header_layout)

        title = QLabel("üñºÔ∏è –ê–Ω–∞–ª—ñ–∑–∞—Ç–∞—Ä –º–µ—Ç–∞–¥–∞–Ω—ã—Ö –º–∞–ª—é–Ω–∫–∞—û")
        title.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 16px;
                font-weight: bold;
                text-align: center;
            }
        """)

        subtitle = QLabel("–ß—ã—Ç–∞–Ω–Ω–µ —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—ñ –∑ –≥—Ä–∞—Ñ—ñ—á–Ω—ã—Ö —Ñ–∞–π–ª–∞—û")
        subtitle.setStyleSheet("""
            QLabel {
                color: #ecf0f1;
                font-size: 10px;
                text-align: center;
                font-style: italic;
            }
        """)
        subtitle.setAlignment(Qt.AlignmentFlag.AlignCenter)

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)

        # –ú–µ–Ω—à—ã –ø—Ä–∞–ø–æ—Ä—Ü—ã—è –¥–ª—è –∑–∞–≥–∞–ª–æ—û–∫–∞
        layout.addWidget(header_frame, stretch=0)  # stretch=0 - —Ñ—ñ–∫—Å–∞–≤–∞–Ω—ã –ø–∞–º–µ—Ä

    def create_controls(self, layout):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫—ñ—Ä–∞–≤–∞–Ω–Ω—è - –∫–∞–º–ø–∞–∫—Ç–Ω–µ–π"""
        controls_group = QGroupBox("–ö—ñ—Ä–∞–≤–∞–Ω–Ω–µ –∞–Ω–∞–ª—ñ–∑–∞–º")
        controls_layout = QVBoxLayout()

        # –ü–µ—Ä—à—ã —Ä–∞–¥–æ–∫ - —à–ª—è—Ö –¥–∞ –ø–∞–ø–∫—ñ
        path_layout = QHBoxLayout()

        path_label = QLabel("üìÅ –ü–∞–ø–∫–∞:")
        path_label.setStyleSheet("font-weight: bold; color: #2c3e50; font-size: 11px;")

        self.path_edit = QLineEdit()
        self.path_edit.setPlaceholderText("–í—ã–±–µ—Ä—ã—Ü–µ –ø–∞–ø–∫—É –∑ –º–∞–ª—é–Ω–∫–∞–º—ñ...")
        self.path_edit.setStyleSheet("""
            QLineEdit {
                padding: 5px;
                border: 1px solid #cccccc;
                border-radius: 4px;
                background-color: white;
                font-size: 11px;
                color: #333333;
            }
            QLineEdit:focus {
                border-color: #3498db;
                background-color: #f8f9fa;
            }
        """)
        self.path_edit.textChanged.connect(self.on_folder_changed)

        self.browse_btn = QPushButton("üìÇ –ê–±—Ä–∞—Ü—å")
        self.browse_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 11px;
                min-width: 80px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        self.browse_btn.clicked.connect(self.browse_folder)

        path_layout.addWidget(path_label)
        path_layout.addWidget(self.path_edit, 1)
        path_layout.addWidget(self.browse_btn)

        # –î—Ä—É–≥—ñ —Ä–∞–¥–æ–∫ - –∫–Ω–æ–ø–∫—ñ –¥–∑–µ—è–Ω–Ω—è—û
        buttons_layout = QHBoxLayout()

        self.analyze_btn = QPushButton("üöÄ –ê–Ω–∞–ª—ñ–∑–∞–≤–∞—Ü—å")
        self.analyze_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 11px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #219a52;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
                color: #7f8c8d;
            }
        """)
        self.analyze_btn.clicked.connect(self.start_analysis)

        self.export_btn = QPushButton("üíæ –≠–∫—Å–ø–∞—Ä—Ç")
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 11px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        self.export_btn.clicked.connect(self.export_results)
        self.export_btn.setEnabled(False)

        buttons_layout.addWidget(self.analyze_btn)
        buttons_layout.addWidget(self.export_btn)
        buttons_layout.addStretch()

        # –Ü–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –ø—Ä–∞ –∞–±—Ä–∞–Ω—É—é –ø–∞–ø–∫—É - –∫–∞–º–ø–∞–∫—Ç–Ω–∞—è
        self.folder_info = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –∞–±—Ä–∞–Ω–∞—è")
        self.folder_info.setStyleSheet("""
            QLabel {
                color: #7f8c8d;
                font-size: 9px;
                font-style: italic;
                padding: 3px;
                background-color: #ecf0f1;
                border-radius: 3px;
                border: 1px dashed #bdc3c7;
            }
        """)

        controls_layout.addLayout(path_layout)
        controls_layout.addLayout(buttons_layout)
        controls_layout.addWidget(self.folder_info)
        controls_group.setLayout(controls_layout)

        # –ú–µ–Ω—à—ã –ø—Ä–∞–ø–æ—Ä—Ü—ã—è –¥–ª—è –∫—ñ—Ä–∞–≤–∞–Ω–Ω—è
        layout.addWidget(controls_group, stretch=0)  # stretch=0 - —Ñ—ñ–∫—Å–∞–≤–∞–Ω—ã –ø–∞–º–µ—Ä

    def create_progress_section(self, layout):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —Å–µ–∫—Ü—ã—é –ø—Ä–∞–≥—Ä—ç—Å—É - –∫–∞–º–ø–∞–∫—Ç–Ω—É—é"""
        progress_group = QGroupBox("–ü—Ä–∞–≥—Ä—ç—Å")
        progress_layout = QVBoxLayout()

        # –ü—Ä–∞–≥—Ä—ç—Å-–±–∞—Ä –∑ –ø—Ä—ã–≥–æ–∂—ã–º —Å—Ç—ã–ª–µ–º
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #cccccc;
                border-radius: 4px;
                text-align: center;
                background-color: #ecf0f1;
                height: 16px;
                color: #333333;
                font-size: 10px;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                    stop: 0 #3498db, stop: 1 #2ecc71);
                border-radius: 3px;
            }
        """)

        # –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª—ñ–∑—É - –∫–∞–º–ø–∞–∫—Ç–Ω—ã
        self.status_label = QLabel("‚úÖ –ì–∞—Ç–æ–≤—ã –¥–∞ —Ä–∞–±–æ—Ç—ã")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 10px;
                font-weight: bold;
                padding: 4px;
                background-color: #d5f4e6;
                border-radius: 3px;
                border: 1px solid #2ecc71;
                color: #27ae60;
            }
        """)

        # –î—ç—Ç–∞–ª—ñ –ø—Ä–∞–≥—Ä—ç—Å—É - –∫–∞–º–ø–∞–∫—Ç–Ω—ã—è
        self.progress_details = QLabel("–ê–±—è—Ä—ã—Ü–µ –ø–∞–ø–∫—É –¥–ª—è –ø–∞—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É")
        self.progress_details.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.progress_details.setStyleSheet("""
            QLabel {
                color: #7f8c8d;
                font-size: 9px;
                font-style: italic;
                padding: 2px;
            }
        """)

        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.status_label)
        progress_layout.addWidget(self.progress_details)
        progress_group.setLayout(progress_layout)

        # –ú–µ–Ω—à—ã –ø—Ä–∞–ø–æ—Ä—Ü—ã—è –¥–ª—è –ø—Ä–∞–≥—Ä—ç—Å—É
        layout.addWidget(progress_group, stretch=0)  # stretch=0 - —Ñ—ñ–∫—Å–∞–≤–∞–Ω—ã –ø–∞–º–µ—Ä

    def create_results_section(self, layout):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —Å–µ–∫—Ü—ã—é –≤—ã–Ω—ñ–∫–∞—û - –í–Ø–õ–Ü–ö–ê–Ø, –∑–∞–π–º–∞–µ —û—Å—ë –∞—Å—Ç–∞—Ç–Ω—è–µ –º–µ—Å—Ü–∞"""
        # –°—Ç–≤–∞—Ä—ç–Ω–Ω–µ —û–∫–ª–∞–¥–∞–∫ –∑ –ø—Ä—ã–≥–æ–∂—ã–º—ñ —Å—Ç—ã–ª—è–º—ñ
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #cccccc;
                border-radius: 6px;
                background-color: white;
            }
            QTabBar::tab {
                background: #ecf0f1;
                border: 1px solid #cccccc;
                padding: 6px 12px;
                margin-right: 2px;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
                color: #2c3e50;
                font-weight: bold;
                font-size: 11px;
            }
            QTabBar::tab:selected {
                background: #3498db;
                color: white;
            }
            QTabBar::tab:hover:!selected {
                background: #d6dbdf;
            }
        """)

        # –£–∫–ª–∞–¥–∫–∞ —Ç–∞–±–ª—ñ—Ü—ã
        self.table_tab = QWidget()
        self.create_table_tab()
        self.tabs.addTab(self.table_tab, "üìã –¢–∞–±–ª—ñ—Ü–∞")

        # –£–∫–ª–∞–¥–∫–∞ –¥—ç—Ç–∞–ª—è—û
        self.details_tab = QWidget()
        self.create_details_tab()
        self.tabs.addTab(self.details_tab, "üîç –î—ç—Ç–∞–ª—ñ")

        # –£–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—ñ
        self.stats_tab = QWidget()
        self.create_stats_tab()
        self.tabs.addTab(self.stats_tab, "üìä –°—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞")

        # –í–Ø–õ–Ü–ö–Ü stretch - –∑–∞–π–º–∞–µ —û—Å—ë –∞—Å—Ç–∞—Ç–Ω—è–µ –º–µ—Å—Ü–∞
        layout.addWidget(self.tabs, stretch=10)

    def create_table_tab(self):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —É–∫–ª–∞–¥–∫—É —Ç–∞–±–ª—ñ—Ü—ã - –º–∞–∫—Å—ñ–º–∞–ª—å–Ω—ã –ø–∞–º–µ—Ä"""
        layout = QVBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)

        # –ó–∞–≥–∞–ª–æ–≤–∞–∫ —Ç–∞–±–ª—ñ—Ü—ã - –∫–∞–º–ø–∞–∫—Ç–Ω—ã
        table_title = QLabel("üìä –í—ã–Ω—ñ–∫—ñ –∞–Ω–∞–ª—ñ–∑—É –º–∞–ª—é–Ω–∫–∞—û")
        table_title.setStyleSheet("font-weight: bold; color: #2c3e50; font-size: 12px; margin-bottom: 5px;")

        # –¢–∞–±–ª—ñ—Ü–∞ –≤—ã–Ω—ñ–∫–∞—û - –í–Ø–õ–Ü–ö–ê–Ø, –∑–∞–π–º–∞–µ —û—Å—ë –º–µ—Å—Ü–∞
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(10)  # –ó–º–µ–Ω–µ–Ω–∞ –∑ 9 –Ω–∞ 10
        self.results_table.setHorizontalHeaderLabels([
            "üìÅ –Ü–º—è —Ñ–∞–π–ª–∞", "üìè –ü–∞–º–µ—Ä", "üéØ DPI", "üé® –ì–ª—ã–±—ñ–Ω—è",
            "üíæ –°—Ü—ñ—Å–∫", "üñºÔ∏è –§–∞—Ä–º–∞—Ç", "üìä –§–∞–π–ª", "üî¢ –ö–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ", "üìÇ –®–ª—è—Ö", "‚úÖ –°—Ç–∞—Ç—É—Å"
        ])

        # –°—Ç—ã–ª—ñ–∑–∞—Ü—ã—è —Ç–∞–±–ª—ñ—Ü—ã
        self.results_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                alternate-background-color: #f8f9fa;
                gridline-color: #e0e0e0;
                border: 1px solid #cccccc;
                border-radius: 4px;
                color: #333333;
                font-size: 11px;
            }
            QTableWidget::item {
                padding: 4px;
                border-bottom: 1px solid #f0f0f0;
                color: #333333;
            }
            QTableWidget::item:selected {
                background-color: #d6eaf8;
                color: #2c3e50;
            }
            QHeaderView::section {
                background-color: #3498db;
                color: white;
                padding: 6px;
                border: none;
                font-weight: bold;
                font-size: 10px;
            }
        """)

        # –ù–∞–ª–∞–¥—ã —Ç–∞–±–ª—ñ—Ü—ã
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        self.results_table.setAlternatingRowColors(True)
        self.results_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.results_table.doubleClicked.connect(self.show_file_details)

        # –ê—û—Ç–∞–º–∞—Ç—ã—á–Ω–∞–µ —Ä–∞–∑–º–µ—Ä–∫–∞–≤–∞–Ω–Ω–µ —à—ã—Ä—ã–Ω—ñ —Å–ª—É–ø–∫–æ—û
        self.results_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # –Ü–º—è
        self.results_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)  # –ü–∞–º–µ—Ä
        self.results_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)  # DPI
        self.results_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)  # –ì–ª—ã–±—ñ–Ω—è
        self.results_table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)  # –°—Ü—ñ—Å–∫
        self.results_table.horizontalHeader().setSectionResizeMode(5, QHeaderView.ResizeMode.ResizeToContents)  # –§–∞—Ä–º–∞—Ç
        self.results_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.ResizeMode.ResizeToContents)  # –ü–∞–º–µ—Ä —Ñ–∞–π–ª–∞
        self.results_table.horizontalHeader().setSectionResizeMode(7, QHeaderView.ResizeMode.ResizeToContents)  # –ö–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ
        self.results_table.horizontalHeader().setSectionResizeMode(9, QHeaderView.ResizeMode.ResizeToContents)  # –°—Ç–∞—Ç—É—Å
        # –®–ª—è—Ö –∑–∞–π–º–∞–µ —û—Å—ë –∞—Å—Ç–∞—Ç–Ω—è–µ –º–µ—Å—Ü–∞
        self.results_table.horizontalHeader().setSectionResizeMode(8, QHeaderView.ResizeMode.Stretch)  # –®–ª—è—Ö

        layout.addWidget(table_title, stretch=0)
        layout.addWidget(self.results_table, stretch=1)  # –¢–∞–±–ª—ñ—Ü–∞ –∑–∞–π–º–∞–µ —û—Å—ë –º–µ—Å—Ü–∞
        self.table_tab.setLayout(layout)

    def create_details_tab(self):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —É–∫–ª–∞–¥–∫—É –¥—ç—Ç–∞–ª—è—û - –º–∞–∫—Å—ñ–º–∞–ª—å–Ω—ã –ø–∞–º–µ—Ä"""
        layout = QVBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)

        details_title = QLabel("üîç –î—ç—Ç–∞–ª—å–Ω—ã—è –∑–≤–µ—Å—Ç–∫—ñ –ø—Ä–∞ –∞–±—Ä–∞–Ω—ã —Ñ–∞–π–ª")
        details_title.setStyleSheet("font-weight: bold; color: #2c3e50; font-size: 12px; margin-bottom: 5px;")

        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)
        self.details_text.setFont(QFont("Consolas", 9))
        self.details_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 8px;
                font-family: Consolas, monospace;
                font-size: 10px;
                color: #333333;
            }
        """)

        layout.addWidget(details_title, stretch=0)
        layout.addWidget(self.details_text, stretch=1)  # –¢—ç–∫—Å—Ç –∑–∞–π–º–∞–µ —û—Å—ë –º–µ—Å—Ü–∞
        self.details_tab.setLayout(layout)

    def create_stats_tab(self):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —É–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—ñ - –º–∞–∫—Å—ñ–º–∞–ª—å–Ω—ã –ø–∞–º–µ—Ä"""
        layout = QVBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)

        stats_title = QLabel("üìä –°—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞ –∞–Ω–∞–ª—ñ–∑—É")
        stats_title.setStyleSheet("font-weight: bold; color: #2c3e50; font-size: 12px; margin-bottom: 5px;")

        self.stats_text = QTextEdit()
        self.stats_text.setReadOnly(True)
        self.stats_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 10px;
                font-size: 11px;
                line-height: 1.4;
                color: #333333;
            }
        """)

        layout.addWidget(stats_title, stretch=0)
        layout.addWidget(self.stats_text, stretch=1)  # –¢—ç–∫—Å—Ç –∑–∞–π–º–∞–µ —û—Å—ë –º–µ—Å—Ü–∞
        self.stats_tab.setLayout(layout)

    def create_status_bar(self):
        """–°—Ç–≤–∞—Ä—ã—Ü—å —Å—Ç–∞—Ç—É—Å-–±–∞—Ä"""
        self.statusBar().setStyleSheet("""
            QStatusBar {
                background-color: #34495e;
                color: white;
                font-weight: bold;
                font-size: 9px;
                height: 18px;
            }
        """)
        self.statusBar().showMessage("‚úÖ –ì–∞—Ç–æ–≤–∞ –¥–∞ —Ä–∞–±–æ—Ç—ã")

    def on_folder_changed(self, text):
        """–ê–±–Ω–∞—û–ª–µ–Ω–Ω–µ —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—ñ –ø—Ä–∞ –∞–±—Ä–∞–Ω—É—é –ø–∞–ø–∫—É"""
        if text and os.path.exists(text):
            # –ü–∞–¥–ª—ñ–∫ —Ñ–∞–π–ª–∞—û —É –ø–∞–ø—Ü—ã
            image_count = 0
            supported_formats = {'.jpg', '.jpeg', '.gif', '.tif', '.tiff', '.bmp', '.png', '.pcx'}

            try:
                for file in os.listdir(text):
                    if os.path.splitext(file)[1].lower() in supported_formats:
                        image_count += 1
            except:
                image_count = 0

            # –ö–∞—Ä–æ—Ç–∫–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è
            short_path = text
            if len(text) > 50:
                short_path = "..." + text[-47:]

            self.folder_info.setText(f"üìÅ –§–∞–π–ª–∞—û: {image_count} | üìÇ {short_path}")
            self.folder_info.setStyleSheet("""
                QLabel {
                    color: #27ae60;
                    font-size: 9px;
                    font-weight: bold;
                    padding: 3px;
                    background-color: #d5f4e6;
                    border-radius: 3px;
                    border: 1px solid #2ecc71;
                }
            """)
        else:
            self.folder_info.setText("–ü–∞–ø–∫–∞ –Ω–µ –∞–±—Ä–∞–Ω–∞—è")
            self.folder_info.setStyleSheet("""
                QLabel {
                    color: #e74c3c;
                    font-size: 9px;
                    font-style: italic;
                    padding: 3px;
                    background-color: #fadbd8;
                    border-radius: 3px;
                    border: 1px dashed #e74c3c;
                }
            """)

    # –ê—Å—Ç–∞—Ç–Ω—ñ—è –º–µ—Ç–∞–¥—ã –∑–∞—Å—Ç–∞—é—Ü—Ü–∞ –±–µ–∑ –∑–º–µ–Ω–∞—û (–¥–ª—è –∫–∞—Ä–æ—Ç–∫–∞—Å—Ü—ñ)
    # ... (browse_folder, start_analysis, update_progress, analysis_finished, display_results,
    # update_stats, show_file_details, export_results, update_ui, closeEvent –∑–∞—Å—Ç–∞—é—Ü—Ü–∞ —Ç–∞–∫—ñ–º—ñ –∂)

    def browse_folder(self):
        """–ê–±—Ä–∞—Ü—å –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        folder = QFileDialog.getExistingDirectory(self, "–ê–±—Ä–∞—Ü—å –ø–∞–ø–∫—É –∑ –º–∞–ª—é–Ω–∫–∞–º—ñ")
        if folder:
            self.path_edit.setText(folder)
            self.statusBar().showMessage(f"‚úÖ –ê–±—Ä–∞–Ω–∞—è –ø–∞–ø–∫–∞: {folder}")

    def start_analysis(self):
        """–ü–∞—á–∞—Ü—å –∞–Ω–∞–ª—ñ–∑ –º–∞–ª—é–Ω–∫–∞—û"""
        folder_path = self.path_edit.text()

        if not folder_path or not os.path.exists(folder_path):
            QMessageBox.warning(self, "‚ö†Ô∏è –ü–∞–º—ã–ª–∫–∞", "–ö–∞–ª—ñ –ª–∞—Å–∫–∞, –∞–±—è—Ä—ã—Ü–µ —Å–∞–ø—Ä–∞—û–¥–Ω—É—é –ø–∞–ø–∫—É")
            return

        # –ë–ª–∞–∫—ñ—Ä–æ—û–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—û –∫—ñ—Ä–∞–≤–∞–Ω–Ω—è
        self.analyze_btn.setEnabled(False)
        self.browse_btn.setEnabled(False)
        self.export_btn.setEnabled(False)

        # –ù–∞–ª–∞–¥—ã –ø—Ä–∞–≥—Ä—ç—Å—É
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("üîÑ –ê–Ω–∞–ª—ñ–∑...")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 10px;
                font-weight: bold;
                padding: 4px;
                background-color: #fdebd0;
                border-radius: 3px;
                border: 1px solid #f39c12;
                color: #e67e22;
            }
        """)

        # –ó–∞–ø—É—Å–∫ —É –∞—Å–æ–±–Ω—ã–º –ø–∞—Ç–æ–∫—É
        self.analysis_thread = AnalysisThread(folder_path)
        self.analysis_thread.progress.connect(self.update_progress)
        self.analysis_thread.finished.connect(self.analysis_finished)
        self.analysis_thread.start()

        self.statusBar().showMessage(f"üîÑ –ê–Ω–∞–ª—ñ–∑ –º–∞–ª—é–Ω–∫–∞—û...")

    def update_progress(self, current, total, filename):
        """–ê–±–Ω–∞–≤—ñ—Ü—å –ø—Ä–∞–≥—Ä—ç—Å"""
        self.progress_bar.setMaximum(total)
        self.progress_bar.setValue(current)
        percent = (current / total) * 100 if total > 0 else 0
        short_filename = filename
        if len(filename) > 30:
            short_filename = "..." + filename[-27:]
        self.progress_details.setText(f"{current}/{total} ({percent:.1f}%) | {short_filename}")

    def analysis_finished(self, results):
        """–ê–ø—Ä–∞—Ü–æ—û–∫–∞ –∑–∞–≤—è—Ä—à—ç–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É"""
        self.current_results = results

        # –†–∞–∑–±–ª–∞–∫—ñ—Ä–æ—û–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—û –∫—ñ—Ä–∞–≤–∞–Ω–Ω—è
        self.analyze_btn.setEnabled(True)
        self.browse_btn.setEnabled(True)
        self.export_btn.setEnabled(True)

        if 'error' in results:
            QMessageBox.critical(self, "‚ùå –ü–∞–º—ã–ª–∫–∞", results['error'])
            self.status_label.setText("‚ùå –ü–∞–º—ã–ª–∫–∞")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 10px;
                    font-weight: bold;
                    padding: 4px;
                    background-color: #fadbd8;
                    border-radius: 3px;
                    border: 1px solid #e74c3c;
                    color: #c0392b;
                }
            """)
        else:
            self.display_results(results)
            self.status_label.setText(f"‚úÖ –ó–∞–≤–µ—Ä—à–∞–Ω–∞: {len(results['results'])}")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 10px;
                    font-weight: bold;
                    padding: 4px;
                    background-color: #d5f4e6;
                    border-radius: 3px;
                    border: 1px solid #2ecc71;
                    color: #27ae60;
                }
            """)
            self.export_btn.setEnabled(True)

        self.progress_bar.setVisible(False)
        self.statusBar().showMessage("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–∞–Ω—ã")

    def display_results(self, results):
        """–ê–¥–ª—é—Å—Ç—Ä–∞–≤–∞—Ü—å –≤—ã–Ω—ñ–∫—ñ —û —Ç–∞–±–ª—ñ—Ü—ã"""
        self.results_table.setRowCount(0)

        for i, result in enumerate(results['results']):
            self.results_table.insertRow(i)

            # –≠–º–∞–¥–∂—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_icon = "‚úÖ" if 'error' not in result else "‚ùå"
            status_text = "OK" if 'error' not in result else result['error'][:20] + "..."

            # –Ü–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –ø—Ä–∞ –∫–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ
            quantization = result.get('quantization_short', 'N/A')

            # –ó–∞–ø–∞—û–Ω–µ–Ω–Ω–µ —Ä–∞–¥–∫–∞
            items = [
                result.get('filename', 'N/A'),
                result.get('image_size', 'N/A'),
                result.get('dpi', '72 DPI'),
                result.get('color_depth', 'N/A'),
                result.get('compression', 'N/A'),
                result.get('image_format', 'N/A'),
                result.get('file_size', 'N/A'),
                quantization,  # –ù–æ–≤—ã —Å–ª—É–ø–æ–∫ –∑ –∫–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ–º
                result.get('file_path', 'N/A'),
                f"{status_icon} {status_text}"
            ]

            for col, text in enumerate(items):
                item = QTableWidgetItem(str(text))
                item.setTextAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)

                if 'error' in result:
                    item.setBackground(QColor(255, 235, 238))
                    item.setForeground(QColor(192, 57, 43))
                elif i % 2 == 0:
                    item.setBackground(QColor(245, 245, 245))
                    item.setForeground(QColor(51, 51, 51))
                else:
                    item.setBackground(QColor(255, 255, 255))
                    item.setForeground(QColor(51, 51, 51))

                self.results_table.setItem(i, col, item)

        self.update_stats(results)

    def update_stats(self, results):
        """–ê–±–Ω–∞–≤—ñ—Ü—å —É–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—ñ"""
        from image_analyzer import ImageAnalyzer
        analyzer = ImageAnalyzer()
        stats = analyzer.get_summary_stats(results)

        stats_text = "=== –°–¢–ê–¢–´–°–¢–´–ö–ê –ê–ù–ê–õ–Ü–ó–£ ===\n\n"

        if 'summary' in results:
            summary = results['summary']
            stats_text += f"–ê–≥—É–ª—å–Ω–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è:\n"
            stats_text += f"‚Ä¢ –ü–∞–ø–∫–∞: {summary.get('folder_path', 'N/A')}\n"
            stats_text += f"‚Ä¢ –£—Å—è–≥–æ —Ñ–∞–π–ª–∞—û: {summary.get('total_files', 0)}\n"
            stats_text += f"‚Ä¢ –ê–ø—Ä–∞—Ü–∞–≤–∞–Ω–∞: {summary.get('processed', 0)}\n\n"

        stats_text += f"–í—ã–Ω—ñ–∫—ñ –∞–ø—Ä–∞—Ü–æ—û–∫—ñ:\n"
        stats_text += f"‚Ä¢ –ü–∞—Å–ø—è—Ö–æ–≤–∞: {stats.get('successful', 0)}\n"
        stats_text += f"‚Ä¢ –ó –ø–∞–º—ã–ª–∫–∞–º—ñ: {stats.get('errors', 0)}\n"
        stats_text += f"‚Ä¢ –ê–≥—É–ª—å–Ω—ã –ø–∞–º–µ—Ä: {stats.get('total_size', 'N/A')}\n\n"

        stats_text += "–†–∞–∑–º–µ—Ä–∫–∞–≤–∞–Ω–Ω–µ –ø–∞ —Ñ–∞—Ä–º–∞—Ç–∞—Ö:\n"
        for fmt, count in stats.get('formats', {}).items():
            stats_text += f"‚Ä¢ {fmt}: {count} —Ñ–∞–π–ª–∞—û\n"

        self.stats_text.setText(stats_text)

    def show_file_details(self, index):
        """–ü–∞–∫–∞–∑–∞—Ü—å –¥—ç—Ç–∞–ª—å–Ω—ã—è –∑–≤–µ—Å—Ç–∫—ñ –ø—Ä–∞ —Ñ–∞–π–ª"""
        row = index.row()
        if not self.current_results or row >= len(self.current_results['results']):
            return

        result = self.current_results['results'][row]
        details = "=== –î–≠–¢–ê–õ–¨–ù–´–Ø –ó–í–ï–°–¢–ö–Ü ===\n\n"

        if 'error' in result:
            details += f"‚ùå –ü–∞–º—ã–ª–∫–∞: {result['error']}\n"
        else:
            # –ê—Å–Ω–æ—û–Ω–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è
            details += f"üìÅ –ü–æ—û–Ω—ã —à–ª—è—Ö: {result.get('file_path', 'N/A')}\n"
            details += f"üìÑ –Ü–º—è —Ñ–∞–π–ª–∞: {result.get('filename', 'N/A')}\n"
            details += f"üñºÔ∏è –§–∞—Ä–º–∞—Ç: {result.get('image_format', 'N/A')}\n"
            details += f"üìè –ü–∞–º–µ—Ä –º–∞–ª—é–Ω–∫–∞: {result.get('image_size', 'N/A')}\n"
            details += f"üé® –ì–ª—ã–±—ñ–Ω—è –∫–æ–ª–µ—Ä—É: {result.get('color_depth', 'N/A')}\n"
            details += f"üéØ –î–∞–∑–≤–æ–ª: {result.get('dpi', 'N/A')}\n"
            details += f"üíæ –°—Ü—ñ—Å–∫: {result.get('compression', 'N/A')}\n"
            details += f"üìä –ü–∞–º–µ—Ä —Ñ–∞–π–ª–∞: {result.get('file_size', 'N/A')}\n"
            details += f"üî¢ –ö–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ: {result.get('quantization_short', 'N/A')}\n\n"

            # –î—ç—Ç–∞–ª—ñ –∫–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω—è
            if 'quantization_tables_count' in result:
                details += f"üîß –ö–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω–µ:\n"
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å —Ç–∞–±–ª—ñ—Ü: {result.get('quantization_tables_count', 'N/A')}\n"
                details += f"‚Ä¢ –ü–∞–º–µ—Ä —Ç–∞–±–ª—ñ—Ü—ã: {result.get('quantization_table_size', 'N/A')}\n\n"

            # –î–∞–¥–∞—Ç–∫–æ–≤–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –∑ formats_info.py
            details += "üîß –¢—ç—Ö–Ω—ñ—á–Ω—ã—è –¥—ç—Ç–∞–ª—ñ:\n"

            if 'exif_keys_count' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å EXIF —Ç—ç–≥–∞—û: {result.get('exif_keys_count', 0)}\n"

            if 'gif_palette_colors' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å –∫–æ–ª–µ—Ä–∞—û —É –ø–∞–ª—ñ—Ç—Ä—ã GIF: {result.get('gif_palette_colors', 'N/A')}\n"

            if 'gif_frames_count' in result and result.get('gif_frames_count', 1) > 1:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å –∫–∞–¥—Ä–∞—û GIF: {result.get('gif_frames_count', 1)}\n"

            if 'jpeg_quantization_tables' in result:
                details += f"‚Ä¢ –¢–∞–±–ª—ñ—Ü—ã –∫–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω—è JPEG: {result.get('jpeg_quantization_tables', {})}\n"

            if 'tiff_tags_count' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å TIFF —Ç—ç–≥–∞—û: {result.get('tiff_tags_count', 0)}\n"

        self.details_text.setText(details)

    def export_results(self):
        """–≠–∫—Å–ø–∞—Ä—Ç–∞–≤–∞—Ü—å –≤—ã–Ω—ñ–∫—ñ —û —Ñ–∞–π–ª"""
        if not self.current_results:
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, "–ó–∞—Ö–∞–≤–∞—Ü—å –≤—ã–Ω—ñ–∫—ñ", "image_analysis_results.txt", "Text Files (*.txt)"
        )

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("Image Metadata Analysis Results\n")
                    f.write("=" * 50 + "\n\n")

                    for result in self.current_results['results']:
                        f.write(f"File: {result.get('filename', 'N/A')}\n")
                        f.write(f"Full Path: {result.get('file_path', 'N/A')}\n")
                        f.write("-" * 40 + "\n")

                        for key, value in result.items():
                            if key not in ['file_path']:
                                f.write(f"{key}: {value}\n")

                        f.write("\n")

                QMessageBox.information(self, "‚úÖ –≠–∫—Å–ø–∞—Ä—Ç", "–í—ã–Ω—ñ–∫—ñ –ø–∞—Å–ø—è—Ö–æ–≤–∞ —ç–∫—Å–ø–∞—Ä—Ç–∞–≤–∞–Ω—ã!")
            except Exception as e:
                QMessageBox.critical(self, "‚ùå –ü–∞–º—ã–ª–∫–∞", f"–ü–∞–º—ã–ª–∫–∞ —ç–∫—Å–ø–∞—Ä—Ç—É: {str(e)}")

    def update_ui(self):
        """–ü–µ—Ä—ã—è–¥—ã—á–Ω–∞–µ –∞–±–Ω–∞—û–ª–µ–Ω–Ω–µ —ñ–Ω—Ç—ç—Ä—Ñ–µ–π—Å—É"""
        pass

    def closeEvent(self, event):
        """–ê–ø—Ä–∞—Ü–æ—û–∫–∞ –∑–∞–∫—Ä—ã—Ü—Ü—è –∞–∫–Ω–∞"""
        if self.analysis_thread and self.analysis_thread.isRunning():
            self.analysis_thread.terminate()
            self.analysis_thread.wait()
        event.accept()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∞–≥—Ä–∞–º—ã
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

    def show_file_details(self, index):
        """–ü–∞–∫–∞–∑–∞—Ü—å –¥—ç—Ç–∞–ª—å–Ω—ã—è –∑–≤–µ—Å—Ç–∫—ñ –ø—Ä–∞ —Ñ–∞–π–ª"""
        row = index.row()
        if not self.current_results or row >= len(self.current_results['results']):
            return

        result = self.current_results['results'][row]
        details = "=== –î–≠–¢–ê–õ–¨–ù–´–Ø –ó–í–ï–°–¢–ö–Ü ===\n\n"

        if 'error' in result:
            details += f"‚ùå –ü–∞–º—ã–ª–∫–∞: {result['error']}\n"
        else:
            # –ê—Å–Ω–æ—û–Ω–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è
            details += f"üìÅ –ü–æ—û–Ω—ã —à–ª—è—Ö: {result.get('file_path', 'N/A')}\n"
            details += f"üìÑ –Ü–º—è —Ñ–∞–π–ª–∞: {result.get('filename', 'N/A')}\n"
            details += f"üñºÔ∏è –§–∞—Ä–º–∞—Ç: {result.get('image_format', 'N/A')}\n"
            details += f"üìè –ü–∞–º–µ—Ä –º–∞–ª—é–Ω–∫–∞: {result.get('image_size', 'N/A')}\n"
            details += f"üé® –ì–ª—ã–±—ñ–Ω—è –∫–æ–ª–µ—Ä—É: {result.get('color_depth', 'N/A')}\n"
            details += f"üéØ –î–∞–∑–≤–æ–ª: {result.get('dpi', 'N/A')}\n"
            details += f"üíæ –°—Ü—ñ—Å–∫: {result.get('compression', 'N/A')}\n"
            details += f"üìä –ü–∞–º–µ—Ä —Ñ–∞–π–ª–∞: {result.get('file_size', 'N/A')}\n\n"

            # –î–∞–¥–∞—Ç–∫–æ–≤–∞—è —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –∑ formats_info.py
            details += "üîß –¢—ç—Ö–Ω—ñ—á–Ω—ã—è –¥—ç—Ç–∞–ª—ñ:\n"

            if 'exif_keys_count' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å EXIF —Ç—ç–≥–∞—û: {result.get('exif_keys_count', 0)}\n"

            if 'gif_palette_colors' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å –∫–æ–ª–µ—Ä–∞—û —É –ø–∞–ª—ñ—Ç—Ä—ã GIF: {result.get('gif_palette_colors', 'N/A')}\n"

            if 'gif_frames_count' in result and result.get('gif_frames_count', 1) > 1:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å –∫–∞–¥—Ä–∞—û GIF: {result.get('gif_frames_count', 1)}\n"

            if 'jpeg_quantization_tables' in result:
                details += f"‚Ä¢ –¢–∞–±–ª—ñ—Ü—ã –∫–≤–∞–Ω—Ç–∞–≤–∞–Ω–Ω—è JPEG: {result.get('jpeg_quantization_tables', {})}\n"

            if 'tiff_tags_count' in result:
                details += f"‚Ä¢ –ö–æ–ª—å–∫–∞—Å—Ü—å TIFF —Ç—ç–≥–∞—û: {result.get('tiff_tags_count', 0)}\n"

        self.details_text.setText(details)
